// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usage is a generated GoMock package.
package usecase

import (
	context "context"
	entity "greattime_coffee/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCoffeeService is a mock of CoffeeService interface.
type MockCoffeeService struct {
	ctrl     *gomock.Controller
	recorder *MockCoffeeServiceMockRecorder
}

// MockCoffeeServiceMockRecorder is the mock recorder for MockCoffeeService.
type MockCoffeeServiceMockRecorder struct {
	mock *MockCoffeeService
}

// NewMockCoffeeService creates a new mock instance.
func NewMockCoffeeService(ctrl *gomock.Controller) *MockCoffeeService {
	mock := &MockCoffeeService{ctrl: ctrl}
	mock.recorder = &MockCoffeeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoffeeService) EXPECT() *MockCoffeeServiceMockRecorder {
	return m.recorder
}

// GetPrice mocks base method.
func (m *MockCoffeeService) GetPrice(arg0 context.Context, arg1 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockCoffeeServiceMockRecorder) GetPrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockCoffeeService)(nil).GetPrice), arg0, arg1)
}

// List mocks base method.
func (m *MockCoffeeService) List(arg0 context.Context) ([]entity.Coffee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]entity.Coffee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCoffeeServiceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCoffeeService)(nil).List), arg0)
}

// MockCoffeeRepo is a mock of CoffeeRepo interface.
type MockCoffeeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCoffeeRepoMockRecorder
}

// MockCoffeeRepoMockRecorder is the mock recorder for MockCoffeeRepo.
type MockCoffeeRepoMockRecorder struct {
	mock *MockCoffeeRepo
}

// NewMockCoffeeRepo creates a new mock instance.
func NewMockCoffeeRepo(ctrl *gomock.Controller) *MockCoffeeRepo {
	mock := &MockCoffeeRepo{ctrl: ctrl}
	mock.recorder = &MockCoffeeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoffeeRepo) EXPECT() *MockCoffeeRepoMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockCoffeeRepo) GetAll(arg0 context.Context) ([]entity.Coffee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]entity.Coffee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCoffeeRepoMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCoffeeRepo)(nil).GetAll), arg0)
}

// GetOne mocks base method.
func (m *MockCoffeeRepo) GetOne(arg0 context.Context, arg1 string) (entity.Coffee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1)
	ret0, _ := ret[0].(entity.Coffee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockCoffeeRepoMockRecorder) GetOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockCoffeeRepo)(nil).GetOne), arg0, arg1)
}

// MockCouponService is a mock of CouponService interface.
type MockCouponService struct {
	ctrl     *gomock.Controller
	recorder *MockCouponServiceMockRecorder
}

// MockCouponServiceMockRecorder is the mock recorder for MockCouponService.
type MockCouponServiceMockRecorder struct {
	mock *MockCouponService
}

// NewMockCouponService creates a new mock instance.
func NewMockCouponService(ctrl *gomock.Controller) *MockCouponService {
	mock := &MockCouponService{ctrl: ctrl}
	mock.recorder = &MockCouponServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouponService) EXPECT() *MockCouponServiceMockRecorder {
	return m.recorder
}

// GetCoupon mocks base method.
func (m *MockCouponService) GetCoupon(arg0 context.Context) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoupon", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoupon indicates an expected call of GetCoupon.
func (mr *MockCouponServiceMockRecorder) GetCoupon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoupon", reflect.TypeOf((*MockCouponService)(nil).GetCoupon), arg0)
}
